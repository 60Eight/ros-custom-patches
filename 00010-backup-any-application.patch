diff --git a/frameworks/base/core/java/android/content/pm/PackageParser.java b/frameworks/base/core/java/android/content/pm/PackageParser.java
index 1ab64b4..c8059a7 100644
--- a/frameworks/base/core/java/android/content/pm/PackageParser.java
+++ b/frameworks/base/core/java/android/content/pm/PackageParser.java
@@ -2990,8 +2990,7 @@ public class PackageParser {
             ai.manageSpaceActivityName = buildClassName(pkgName, manageSpaceActivity,
                     outError);
         }
-        boolean allowBackup = sa.getBoolean(
-                com.android.internal.R.styleable.AndroidManifestApplication_allowBackup, true);
+        boolean allowBackup = true;
         if (allowBackup) {
             ai.flags |= ApplicationInfo.FLAG_ALLOW_BACKUP;
             // backupAgent, killAfterRestore, fullBackupContent, backupInForeground,

diff --git a/frameworks/base/services/backup/java/com/android/server/backup/utils/AppBackupUtils.java b/frameworks/base/services/backup/java/com/android/server/backup/utils/AppBackupUtils.java
index 485fc3d..0afacae 100644
--- a/frameworks/base/services/backup/java/com/android/server/backup/utils/AppBackupUtils.java
+++ b/frameworks/base/services/backup/java/com/android/server/backup/utils/AppBackupUtils.java
@@ -48,10 +48,6 @@ public class AppBackupUtils {
      * </ol>
      */
     public static boolean appIsEligibleForBackup(ApplicationInfo app, PackageManager pm) {
-        // 1. their manifest states android:allowBackup="false"
-        if ((app.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) == 0) {
-            return false;
-        }
         // 2. they run as a system-level uid but do not supply their own backup agent
         if ((app.uid < Process.FIRST_APPLICATION_UID) && (app.backupAgentName == null)) {
             return false;

diff --git a/frameworks/base/services/core/java/com/android/server/pm/ShortcutPackageInfo.java b/frameworks/base/services/core/java/com/android/server/pm/ShortcutPackageInfo.java
index e8f8a13..67d6f8c 100644
--- a/frameworks/base/services/core/java/com/android/server/pm/ShortcutPackageInfo.java
+++ b/frameworks/base/services/core/java/com/android/server/pm/ShortcutPackageInfo.java
@@ -73,7 +73,7 @@ class ShortcutPackageInfo {
         mLastUpdateTime = lastUpdateTime;
         mIsShadow = isShadow;
         mSigHashes = sigHashes;
-        mBackupAllowed = false; // By default, we assume false.
+        mBackupAllowed = true; // By default, we assume true.
         mBackupSourceBackupAllowed = false;
     }
     public static ShortcutPackageInfo newEmpty() {

diff --git a/frameworks/base/services/core/java/com/android/server/pm/ShortcutService.java b/frameworks/base/services/core/java/com/android/server/pm/ShortcutService.java
index a98cf6b..b25bd7e 100644
--- a/frameworks/base/services/core/java/com/android/server/pm/ShortcutService.java
+++ b/frameworks/base/services/core/java/com/android/server/pm/ShortcutService.java
@@ -2991,7 +2991,7 @@ public class ShortcutService extends IShortcutService.Stub {
         return isApplicationFlagSet(packageName, userId, ApplicationInfo.FLAG_ALLOW_BACKUP);
     }
     static boolean shouldBackupApp(PackageInfo pi) {
-        return (pi.applicationInfo.flags & ApplicationInfo.FLAG_ALLOW_BACKUP) != 0;
+        return true;
     }
     @Override
     public byte[] getBackupPayload(@UserIdInt int userId) {
